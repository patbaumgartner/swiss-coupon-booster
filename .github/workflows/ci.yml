name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

env:
  JAVA_VERSION: 21
  MAVEN_OPTS: "-Xmx1024m -XX:+UseG1GC"
  PLAYWRIGHT_BROWSERS_PATH: ~/.cache/playwright

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        java-version: [21]
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v5
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
        key: playwright-browsers-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          playwright-browsers-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Install Playwright browsers
      run: |
        mvn exec:java -e -ntp -Dexec.mainClass="com.microsoft.playwright.CLI" -Dexec.args="install --with-deps" || {
          echo "Playwright installation failed, retrying..."
          sleep 5
          mvn exec:java -e -ntp -Dexec.mainClass="com.microsoft.playwright.CLI" -Dexec.args="install --with-deps"
        }

    - name: Validate Maven POM
      run: mvn validate -ntp

    - name: Check code formatting
      run: mvn spring-javaformat:validate -ntp
      continue-on-error: false

    - name: Build, Test, and Package
      run: |
        # The 'verify' phase runs all tests (unit and integration) and packages the application.
        # We use -Dmaven.test.failure.ignore=true to ensure that all tests run and
        # reports are generated, even if some tests fail. The job's overall success
        # will be determined by the test-reporter action.
        xvfb-run -a mvn clean verify -ntp -Dmaven.test.failure.ignore=true
      env:
        MAVEN_OPTS: ${{ env.MAVEN_OPTS }}
        PLAYWRIGHT_BROWSERS_PATH: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}

    - name: Generate Test Report
      uses: dorny/test-reporter@v2.1.1
      if: always()
      with:
        name: Test Results (Java ${{ matrix.java-version }})
        path: target/surefire-reports/*.xml,target/failsafe-reports/TEST-*.xml
        reporter: java-junit
        fail-on-error: true

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts-java-${{ matrix.java-version }}
        path: |
          target/*.jar
          target/surefire-reports/
          target/failsafe-reports/
          target/site/
          target/dependency-check-report.html
          target/dependency-check-report.xml
          target/spotbugsXml.xml
          target/pit-reports/
        retention-days: 30
        if-no-files-found: ignore

  analysis:
    name: Quality and Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 20

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Download build artifacts
      uses: actions/download-artifact@v6
      with:
        name: build-artifacts-java-21
        path: target/

    - name: Run OpenRewrite analysis
      run: mvn rewrite:dryRun -ntp

    - name: Check POM sorting
      run: mvn sortpom:verify -Dsort.verifyFail=Stop -ntp

    - name: Run SpotBugs analysis
      run: mvn spotbugs:check -ntp

    - name: Run mutation testing
      run: mvn org.jacoco:jacoco-maven-plugin:prepare-agent pitest:mutationCoverage -ntp
      env:
        MAVEN_OPTS: ${{ env.MAVEN_OPTS }}

    - name: Run OWASP dependency check
      run: mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=8 -ntp
      env:
        MAVEN_OPTS: ${{ env.MAVEN_OPTS }}

    - name: Generate SBOM
      run: mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom -ntp

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: software-bill-of-materials
        path: target/bom.xml
        retention-days: 90

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, analysis]
    if: always()

    steps:
    - name: Report build status
      run: |
        echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Build and Test**: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality and Security Analysis**: ${{ needs.analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Determine overall status
        if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
          echo "### ❌ Pipeline Failed" >> $GITHUB_STEP_SUMMARY
          echo "The build and test phase failed. Please check the test reports and build logs." >> $GITHUB_STEP_SUMMARY
          exit 1
        elif [[ "${{ needs.analysis.result }}" == "failure" ]]; then
          echo "### ⚠️ Pipeline Completed with Issues" >> $GITHUB_STEP_SUMMARY
          echo "The build succeeded, but the quality and/or security analysis found issues to address." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ Pipeline Successful" >> $GITHUB_STEP_SUMMARY
          echo "All checks passed successfully!" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Available Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Build and analysis reports" >> $GITHUB_STEP_SUMMARY
        echo "- Packaged JAR file" >> $GITHUB_STEP_SUMMARY
        echo "- Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY
